{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Setup",

  "Parameters" : {

  "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },

    "InstanceType" : {
    "Type" : "String",
    "AllowedValues" : [ "t1.micro", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "c1.medium", "c1.xlarge"]
  },

  "ApplicationName" : {
    "Type" : "String"
  },

  "HostedZone" : {
    "Type" : "String"
  },

  "GithubUsername" : {
    "Type" : "String"
  },

  "GithubPassword" : {
    "Type" : "String",
    "NoEcho" : "TRUE"
  },

  "GithubOrganization" : {
    "Type" : "String"
  },

  "ProjectName" : {
    "Type" : "String"
  },

  "Email" : {
    "Type" : "String"
  },
  "Bucket" : {
    "Type" : "String"
  }
  },

  "Mappings" : {
  "AWSInstanceType2Arch" : {
    "t1.micro"   : { "Arch" : "64" },
    "m1.small"   : { "Arch" : "64" },
    "m1.medium"  : { "Arch" : "64" },
    "m1.large"   : { "Arch" : "64" },
    "m1.xlarge"  : { "Arch" : "64" },
    "m2.xlarge"  : { "Arch" : "64" },
    "m2.2xlarge" : { "Arch" : "64" },
    "m2.4xlarge" : { "Arch" : "64" },
    "c1.medium"  : { "Arch" : "64" },
    "c1.xlarge"  : { "Arch" : "64" }
    },
    
    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "32" : "ami-7f418316", "64" : "ami-7341831a" },
      "us-west-1"      : { "32" : "ami-951945d0", "64" : "ami-971945d2" },
      "us-west-2"      : { "32" : "ami-16fd7026", "64" : "ami-10fd7020" },
      "eu-west-1"      : { "32" : "ami-24506250", "64" : "ami-20506254" },
      "ap-southeast-1" : { "32" : "ami-74dda626", "64" : "ami-7edda62c" },
      "ap-northeast-1" : { "32" : "ami-dcfa4edd", "64" : "ami-e8fa4ee9" }
    }
  },
  "Resources" : {

    "Group" : {
    "Type": "AWS::IAM::Group",
    "Properties" : {
    "Policies" : [ {
       "PolicyName" : "myapppolicy",
       "PolicyDocument" : {
         "Statement" : [ {
           "Effect" : "Allow",
           "Action" : [ "s3:*" ],
           "Resource": { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "Bucket" } , "/*"]]}
          } ]
       }
    }]
    }
  },

  "addUserToGroup" : {
     "Type" : "AWS::IAM::UserToGroupAddition",
     "Properties" : {
        "GroupName" : { "Ref" : "Group" },
        "Users" : [ { "Ref" : "User" } ]
     }
  },

  "User" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": { "Statement":[{
            "Effect":"Allow",
            "Action":"*",
            "Resource":"*"
          }
        ]}
       }]
      }
    },

  "HostKeys" : {
    "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
      "UserName" : { "Ref" : "User" }
    }
  },

  "WebServer": {
    "Type": "AWS::EC2::Instance",
    "Metadata" : {
      "AWS::CloudFormation::Init" : {
      "config" : {

      "files" : {
          "/opt/aws/aws.config" : {
            "content" : { "Fn::Join" : ["", [
              "AWS.config(\n",
              ":access_key_id => \"", { "Ref" : "HostKeys" }, "\",\n",
              ":secret_access_key => \"", {"Fn::GetAtt": ["HostKeys", "SecretAccessKey"]}, "\",\n", 
              ":region => \"", { "Ref" : "AWS::Region" }, "\")\n"
            ]]},
            "mode"   : "000500",
            "owner"  : "tomcat",
            "group"  : "tomcat"
          },

        "/tmp/common-step-definitions-1.0.0.gem" : {
        "source" : "https://s3-us-west-2.amazonaws.com/OpenDelivery/resources/gems/common-step-definitions-1.0.0.gem",
        "mode"   : "000500",
                "owner"  : "ec2-user",
                "group"  : "ec2-user"
        },

        "/root/.ssh/config" : {
        "content" : { "Fn::Join" : ["", [
          "Host github.com\n",
          "StrictHostKeyChecking no\n"
                  ]]},
        "mode"   : "000600",
                "owner"  : "root",
                "group"  : "root"
        }
      }
      }
      }
    },
    "Properties": {
    "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                  { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
    "InstanceType"     : { "Ref" : "InstanceType" },
    "SecurityGroups"   : [ { "Ref" : "FrontendGroup" } ],
    "KeyName"        : { "Ref" : "KeyName" },
    "Tags": [ { "Key": "Name", "Value": "AWSCLI" } ],
    "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
      "#!/bin/bash -v\n",

      "yum update -y aws-cfn-bootstrap\n",

      "# Install Packages\n",
      "/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackName" }, " -r WebServer ",
      "    --access-key ", { "Ref" : "HostKeys" },
      "    --secret-key ", { "Fn::GetAtt" : [ "HostKeys", "SecretAccessKey" ]},
      "    --region ", { "Ref" : "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

      "# Install Ruby 1.9.3\n",
      "yum -y erase ruby rubygems\n",
      "yum -y install ruby19-devel\n",
      "yum -y install libxml2-devel\n",
      "yum -y install libxslt-devel\n",
      "yum -y install git\n",
      "yum -y install make\n",
      "yum -y install gcc\n",

      "# Move Ruby 1.9.3 to Default Ruby\n",
      "rm -rf /usr/bin/ruby\n",
      "ln -s /usr/bin/ruby1.9 /usr/bin/ruby\n",
      "rm -rf /usr/bin/gem\n",
      "ln -s /usr/bin/gem1.9 /usr/bin/gem\n",

      "# Get CD Platform Files\n",
      "wget -P /tmp/ https://raw.github.com/stelligent/opendelivery_platform/master/config/jenkins_backup.sh --no-check-certificate\n",
      "wget -P /tmp/ https://raw.github.com/stelligent/opendelivery_platform/master/config/server.xml --no-check-certificate\n",
      "wget -P /tmp/ https://raw.github.com/stelligent/opendelivery_platform/master/lib/boot.rb --no-check-certificate\n",
      "wget -P /tmp/ https://raw.github.com/stelligent/opendelivery_platform/master/lib/stack_builder.rb --no-check-certificate\n",
      "wget -P /tmp/ https://raw.github.com/stelligent/opendelivery_platform/master/lib/database_export.rb --no-check-certificate\n",
      "wget -P /tmp/ https://raw.github.com/stelligent/opendelivery_platform/master/lib/s3_upload.rb --no-check-certificate\n",
      "wget -P /tmp/ https://raw.github.com/stelligent/opendelivery_platform/master/lib/create_domain.rb --no-check-certificate\n",
      "wget -P /tmp/ https://raw.github.com/stelligent/opendelivery_platform/master/lib/showback_domain.rb --no-check-certificate\n",
      "wget -P /tmp/ https://raw.github.com/stelligent/opendelivery_platform/master/lib/set_properties.rb --no-check-certificate\n",
      "wget -P /tmp/ https://raw.github.com/stelligent/opendelivery_platform/master/lib/add_github_key.rb --no-check-certificate\n",
      "wget -P /tmp/ https://raw.github.com/stelligent/opendelivery_platform/master/lib/check_github_repo.rb --no-check-certificate\n",
      "wget -P /tmp/ https://raw.github.com/stelligent/opendelivery_platform/master/lib/create_github_repo.rb --no-check-certificate\n",
      "wget -P /tmp/ https://raw.github.com/stelligent/opendelivery_platform/master/lib/transient_environments.rb --no-check-certificate\n",
      "wget -P /tmp/ https://raw.github.com/stelligent/opendelivery_platform/master/cloudformation/platform_setup.template --no-check-certificate\n",
      "wget -P /tmp/ https://raw.github.com/stelligent/opendelivery_platform/master/cloudformation/jenkins.linux.template --no-check-certificate\n",
      "# see how we hardcoded the us-west2 endpoint? this needs to be moved to a mapping \n",
      "#wget -P /tmp/ https://s3-us-west-2.amazonaws.com/OpenDelivery/resources/rpm/ruby-1.9.3p0-2.amzn1.x86_64.rpm --no-check-certificate\n",
      "wget -P /tmp/ https://s3-us-west-2.amazonaws.com/OpenDelivery/resources/rpm/redis-2.6.2-1.el5.x86_64.rpm --no-check-certificate\n",

      "# Generate SSH keypairs\n",
      "ssh-keygen -t rsa -N \"\" -f /root/.ssh/id_rsa\n",

      "# Install RubyGems\n",
      "/usr/bin/gem install trollop     --version 2.0      --no-rdoc --no-ri\n",
      "/usr/bin/gem install aws-sdk                        --no-rdoc --no-ri\n",
      "/usr/bin/gem install bigdecimal  --version 1.1.0    --no-rdoc --no-ri\n",
      "/usr/bin/gem install github_api  --version 0.7.0    --no-rdoc --no-ri\n",

      "/usr/bin/gem list\n",

      "# Add id_rsa to ssh agent\n",
      "#eval `ssh-agent -s` \n",
      "#ssh-add /root/.ssh/id_rsa\n",


      "# Create Simple DB Domain\n",
      "echo ruby /tmp/create_domain.rb --sdbdomain ", { "Ref" : "AWS::StackName" }, "\n",
      "ruby /tmp/create_domain.rb --sdbdomain ", { "Ref" : "AWS::StackName" }, "\n",

      "# Set S3 Bucket Property\n",
      "echo ruby /tmp/set_properties.rb --sdbdomain ", { "Ref" : "AWS::StackName" }, " --itemname properties --property S3Bucket --value ", { "Ref" : "Bucket" }, "\n",
      "ruby /tmp/set_properties.rb --sdbdomain ", { "Ref" : "AWS::StackName" }, " --itemname properties --property S3Bucket --value ", { "Ref" : "Bucket" }, "\n",

      "# Set Base AWS AMI\n",
      "echo ruby /tmp/set_properties.rb --sdbdomain ", { "Ref" : "AWS::StackName" }, " --itemname ami --property base --value ami-7341831a\n",
      "ruby /tmp/set_properties.rb --sdbdomain ", { "Ref" : "AWS::StackName" }, " --itemname ami --property base --value ami-7341831a\n",

      "# Set CFN User Group\n",
      "echo ruby /tmp/set_properties.rb --sdbdomain ", { "Ref" : "AWS::StackName" }, " --itemname properties --property GROUP --value ", { "Ref" : "Group" }, "\n",
      "ruby /tmp/set_properties.rb --sdbdomain ", { "Ref" : "AWS::StackName" }, " --itemname properties --property GROUP --value ", { "Ref" : "Group" }, "\n",

      "# Setup Git Repository\n",
      "echo ruby /tmp/add_github_key.rb  --publicKey /root/.ssh/id_rsa.pub --user ", { "Ref" : "GithubUsername" }, " --pass ", { "Ref" : "GithubPassword" }, "\n",
      "ruby /tmp/add_github_key.rb  --publicKey /root/.ssh/id_rsa.pub --user ", { "Ref" : "GithubUsername" }, " --pass ", { "Ref" : "GithubPassword" }, "\n",

      "# Clone Github Repository\n",
      "#git clone git@github.com:stelligent/opendelivery_platform.git /tmp/platform\n",
      "#git clone git@github.com:stelligent/opendelivery_jenkins.git /tmp/jenkins\n",
      "git clone https://",{ "Ref" : "GithubUsername" },":",{ "Ref" : "GithubPassword" },"@github.com/stelligent/opendelivery_platform.git /tmp/jenkins\n",
      "git clone https://",{ "Ref" : "GithubUsername" },":",{ "Ref" : "GithubPassword" },"@github.com/stelligent/opendelivery_jenkins.git /tmp/jenkins\n",



      "platform=`ruby /tmp/check_github_repo.rb --user ", { "Ref" : "GithubUsername" }, " --pass ", { "Ref" : "GithubPassword" }, " --organization ", { "Ref" : "GithubOrganization" }, " --repo ", { "Ref" : "ProjectName" }, "_platform`\n",
      "if [  \"$platform\" == \"false\" ]; then\n",
        "ruby /tmp/create_github_repo.rb --user ", { "Ref" : "GithubUsername" }, " --pass ", { "Ref" : "GithubPassword" }, " --project ", { "Ref" : "ProjectName" }, " --organization ", { "Ref" : "GithubOrganization" }, " --extension _platform\n",
        "cd /tmp/platform\n",
        "rm -rf .git\n",
        "git init\n",
        "git add .\n",
        "git commit -m \"First commit\"\n",
        "git remote add origin git@github.com:", { "Ref" : "GithubOrganization" }, "/", { "Ref" : "ProjectName" }, "_platform.git\n",
        "git push -u origin master\n",
      "fi\n",

      "jenkins=`ruby /tmp/check_github_repo.rb --user ", { "Ref" : "GithubUsername" }, " --pass ", { "Ref" : "GithubPassword" }, " --organization ", { "Ref" : "GithubOrganization" }, " --repo ", { "Ref" : "ProjectName" }, "_jenkins`\n",
      "if [  \"$jenkins\" == \"false\" ]; then\n",
        "ruby /tmp/create_github_repo.rb --user ", { "Ref" : "GithubUsername" }, " --pass ", { "Ref" : "GithubPassword" }, " --project ", { "Ref" : "ProjectName" }, " --organization ", { "Ref" : "GithubOrganization" }, " --extension _jenkins\n",
        "cd /tmp/jenkins\n",
        "rm -rf .git\n",
        "git init\n",
        "git add .\n",
        "git commit -m \"First commit\"\n",
        "git remote add origin git@github.com:", { "Ref" : "GithubOrganization" }, "/", { "Ref" : "ProjectName" }, "_jenkins.git\n",
        "git push -u origin master\n",
      "fi\n",

      "# TODO: Brian, what are we doing about these?\n",
      "# Tar Puppet Modules and Manifests\n",
      "#cd /tmp/platform/infrastructure/puppet\n",
      "#tar -czvf puppet.tar.gz modules/* manifests/*\n",

      "# Tar Capistrano Deployment configuration\n",
      "#cd /tmp/platform\n",
      "#tar -czvf capistrano.tar.gz deployment/*\n",

      "# Push platform dependencies up to S3\n",
      "ruby /tmp/s3_upload.rb --filename /tmp/server.xml                                       --key server.xml                                        --bucket ", { "Ref" : "Bucket" } , "\n",
      "ruby /tmp/s3_upload.rb --filename /tmp/jenkins_backup.sh                                --key jenkins_backup.sh                                 --bucket ", { "Ref" : "Bucket" } , "\n",
      "ruby /tmp/s3_upload.rb --filename /tmp/database_export.rb                               --key database_export.rb                                --bucket ", { "Ref" : "Bucket" } , "\n",
      "ruby /tmp/s3_upload.rb --filename /tmp/transient_environments.rb                        --key transient_environments.rb                         --bucket ", { "Ref" : "Bucket" } , "\n",
      "ruby /tmp/s3_upload.rb --filename /tmp/common-step-definitions-1.0.0.gem                --key resources/gems/common-step-definitions-1.0.0.gem  --bucket ", { "Ref" : "Bucket" } , "\n",
      "ruby /tmp/s3_upload.rb --filename /root/.ssh/id_rsa                                     --key private/id_rsa                                    --bucket ", { "Ref" : "Bucket" } , "\n",
      "ruby /tmp/s3_upload.rb --filename /root/.ssh/id_rsa.pub                                 --key private/id_rsa.pub                                --bucket ", { "Ref" : "Bucket" } , "\n",
      "ruby /tmp/s3_upload.rb --filename /tmp/platform_setup.template                          --key templates/platform_setup.template                 --bucket ", { "Ref" : "Bucket" } , "\n",
      "ruby /tmp/s3_upload.rb --filename /tmp/jenkins.linux.template                           --key templates/jenkins.template                        --bucket ", { "Ref" : "Bucket" } , "\n",
      "#ruby /tmp/s3_upload.rb --filename /tmp/platform/infrastructure/puppet/puppet.tar.gz     --key puppet.tar.gz                                     --bucket ", { "Ref" : "Bucket" } , "\n",
      "#ruby /tmp/s3_upload.rb --filename /tmp/platform/capistrano.tar.gz                       --key capistrano.tar.gz                                 --bucket ", { "Ref" : "Bucket" } , "\n",
      "#ruby /tmp/s3_upload.rb --filename /tmp/ruby-1.9.3p0-2.amzn1.x86_64.rpm                  --key resources/rpm/ruby-1.9.3p0-2.amzn1.x86_64.rpm     --bucket ", { "Ref" : "Bucket" } , "\n",
      "ruby /tmp/s3_upload.rb --filename /tmp/redis-2.6.2-1.el5.x86_64.rpm                     --key resources/rpm/redis-2.6.2-1.el5.x86_64.rpm        --bucket ", { "Ref" : "Bucket" } , "\n",

        "/opt/aws/bin/cfn-signal", " -e 0", " '", { "Ref" : "WaitHandle" }, "'","\n"
    ]]}}
    }
  },

  "FrontendGroup" : {
    "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
      "GroupDescription" : "Enable SSH Access",
    "SecurityGroupIngress" : [
      { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0" }
    ]
    }
  },

  "IPAddress" : {
    "Type" : "AWS::EC2::EIP"
  },

  "IPAssociation" : {
    "Type" : "AWS::EC2::EIPAssociation",
    "Properties" : {
    "InstanceId" : { "Ref" : "WebServer" },
    "EIP" : { "Ref" : "IPAddress" }
    }
  },

        "JenkinsStack" : {
          "Type" : "AWS::CloudFormation::Stack",
          "DependsOn" : "WaitCondition",
          "Properties" : {
            "TemplateURL" : { "Fn::Join" : ["", ["https://s3-us-west-2.amazonaws.com/", { "Ref" : "Bucket" }, "/templates/jenkins.template"]]},
            "TimeoutInMinutes" : "20",
            "Parameters" : {
               "Group" : { "Ref" : "Group" },
               "S3Bucket" : { "Ref" : "Bucket"},
               "HostedZone" : { "Ref" : "HostedZone" },
               "ApplicationName" : { "Ref" : "ApplicationName" },
               "KeyName" : { "Ref" : "KeyName" },
               "InstanceType" : "m1.small",
               "Email" : { "Ref" : "Email" },
               "SetupTemplate" : { "Ref" : "AWS::StackName" },
               "GithubOrganization" : { "Ref" : "GithubOrganization" },
               "ProjectName": { "Ref" : "ProjectName" }
            }
          }
        },

  "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "WebServer",
      "Properties" : {
        "Handle" : { "Ref" : "WaitHandle" },
        "Timeout" : "900"
      }
    }
  },

  "Outputs" : {
  "InstanceIPAddress" : {
      "Value" : { "Ref" : "IPAddress" }
    }
  }
}
